#!/usr/bin/env python
#
# Copyright (c) 2013, Arista Networks, Inc. 
# All rights reserved. 
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are 
# met: 
# - Redistributions of source code must retain the above copyright notice, 
# this list of conditions and the following disclaimer. 
# - Redistributions in binary form must reproduce the above copyright 
# notice, this list of conditions and the following disclaimer in the 
# documentation and/or other materials provided with the distribution. 
# - Neither the name of Arista Networks nor the names of its 
# contributors may be used to endorse or promote products derived from 
# this software without specific prior written permission. 
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS 
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN 
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# STP Stable State monitoring
#
#    Version 1.0 6th Sept 2013
#    Written by: 
#       Sean Flack, Arista Networks
#
#    Revision history:
#       1.0 - initial release

"""
   DESCRIPTION
      STP Stable State Monitor will monitor the state of the STP agent. If 
      the topology transitions to/from a stable state, a log message will be 
      generated. This is useful to know as an MLAG peer in this state is not 
      able to be restarted without impact to the STP topology. 

   INSTALLATION
      In order to install STP Stable State Monitor, copy 'stpm' to /mnt/flash.

      STP Stable State Monitor can then be started using:
         (bash:root)# /mnt/flash/stpm &
      and you can use 'nohup' utility in order to make this persistent over ssh:
         (bash:root)# nohup /mnt/flash/stpm &      

      In order to run STP Stable State Monitor as a daemon (persistent after 
      reboot), add the following to the startup-config:
         event-handler stpm
            trigger on-boot
            action bash sudo /usr/bin/daemonize /mnt/flash/stpm
            asynchronous
      
      STP Stable State Monitor process name is 'stpm', so standard Linux tools 
      can be used to stop and restart it:
      e.g.
         (bash:root)# pkill stpm
         (bash:root)# /mnt/flash/stpm &

      In order to uninstall DOM Monitor, use:
         (bash:root)# rm /mnt/flash/stpm
         (bash:root)# pkill stpm                    // if running
      
   COMPATIBILITY
      Version 1.0 has been developed and tested against EOS-4.9.5 and 
      EOS-4.12.3. Please reach out to support@aristanetworks.com if you want to 
      run this against a different EOS release.

  LIMITATIONS
      None known.
"""

import Ark
import EntityManager
import Logging
import Tac

# Register as stpStable Monitor with LogManager
Ark.configureLogManager( 'stpm' )

# Define log message
STP_STABLE_CHANGE = None
Logging.logD( id='STP_STABLE_CHANGE',
              severity=Logging.logWarning,
              format='STP Stable state is now %s ',
              explanation='The STP agent has signified that the toplogy '
                          'transitioned from/to a stable state. If it is currently '
                          'unstable, then it cannot be restarted without causing '
                          'an STP reconvergence upon MLAG peer failure.' ,
              recommendedAction='If STP state is unstable, check for STP '
              			  'inconsistencies.' )


# Mount data from Sysdb
em = EntityManager.Sysdb( 'ar' )
mg = em.mountGroup()
stpStatus = mg.mount( 'stp/status', 'Stp::Status', 'r' )
mg.close( blocking=True )

class StpStableReactor( Tac.Notifiee ):
   notifierTypeName = 'Stp::Status'

   def __init__( self, notifier ):
      Tac.Notifiee.__init__( self, notifier )
            
   @Tac.handler( "stable" )
   def handleStableStatus( self ):
      if self.notifier_.stable:
         Logging.log( STP_STABLE_CHANGE, 'stable' )
      else:
         Logging.log( STP_STABLE_CHANGE, 'not stable' )
      
def main():
   Tac.setproctitle( 'stpm' )
   stpStableReactor = StpStableReactor( stpStatus )
   
   # Run forever
   Tac.runActivities()

if __name__ == '__main__':
   main()
