#!/usr/bin/env python 
#
# Copyright (c) 2013 Arista Networks, Inc.  All rights reserved.
#
# Automatic static destination NAT programming
#
#    Version 1.0 4/23/2013
#    Written by: 
#       Andrei Dvornic, Arista Networks
#
#    Revision history:
#       1.0 - initial release

'''
   DESCRIPTION
      This script programs all static destination NAT rules, based on an input 
      file. All previously applied static destination NAT rules, which are not
      also present in the input file, will be removed. However, if the script 
      fails for any reason, the previously-applied static destination NAT rules
      are reverted.

      The expected input file should be a csv file, with the following columns:
         Interface
         Destination IP inside
         Destination IP outside
         Destination Port inside
         Destination Port outside
         Switch hostname

   INSTALLATION
      In order to install this script, copy this file to /mnt/flash.
      In order to run the script, you will need to also create an input file
      on the switch.

      Script can be run using:
         (bash:root)# /mnt/flash/natp <input-file> [<options>]
      e.g.
         (bash:root)# /mnt/flash/natp /mnt/flash/nat.csv

      See: 
         (bash:root)# /mnt/flash/natp --help
      for details about the command-line options.

      In order to uninstall the script, use:
         (bash:root)# rm /mnt/flash/natp

   CONFIGURATION
      By default, any successful or unsuccessful run of the script will be logged
      to stdout. In order to generate an email report instead, use the -e/--email 
      option:
      e.g.
         (bash:root)# /mnt/flash/natp /mnt/flash/nat.csv -e nat@nat.com

      You can schedule the script to run periodically using the Cli Scheduler.
      For example, in order to schedule the script to run every day at midnight,
      add the following to the startup-config:
         schedule natp at 00:00:00 interval 1440 max-log-files 10 command bash 
            /mnt/flash/natp <input-file> -e <email>

   COMPATIBILITY
      Version 1.0 has been developed and tested against EOS-4.11.3. Please 
      reach out to support@aristanetworks.com if you want to run this script
      against a different EOS release.
'''

import EntityManager
import Tac

import csv
import optparse
import smtplib

from email.mime.text import MIMEText

def sendEmail( addr, subject, text, sender ):
   msg = MIMEText( text )   
   msg[ 'Subject' ] = subject
   msg[ 'From' ] = sender
   msg[ 'To' ] = addr
   smtp = smtplib.SMTP( 'mx' )
   smtp.sendmail( msg[ 'From' ], addr, msg.as_string() )
   smtp.quit()

def main():
   # Create help string and parse cmd line
   usage = 'usage: %prog <input-filename> [options]'
   op = optparse.OptionParser( usage=usage )
   op.add_option( '-e', '--email', dest='email', action='store',
                  help='destination email for the report' )
   ( options, arguments ) = op.parse_args()

   # Check cmd line options
   if not arguments:
      op.error( 'You need to specify an input filename.' )
   if len( arguments ) > 1:
      op.error( 'Too many input arguments.' )
   if not options.email:
      print '\nWARNING: Email not specified - Report will be printed to stdout.'

   report = ''

   # Read input data
   try:
      data = [ x for x in csv.DictReader( open( arguments[ 0 ], 'rb' ), 
                                          delimiter=',' ) ]
      if not data:
         report += 'Failed to update NAT because there is no data ' \
                   'in %s.' % arguments[ 0 ]         
   except ( TypeError, IOError ) as e:
      report += 'Failed to update NAT because loading new data ' \
                'from %s failed: %s' % ( arguments[ 0 ], str( e ) )

   # Validate input data
   if not report:
      keys = [ 'Interface',
               'Destination IP inside', 
               'Destination IP outside',
               'Destination Port inside',
               'Destination Port outside',
               'Switch hostname' ]

      for rule in data:
         if sorted( rule.keys() ) != sorted( keys ):
            report += 'Loading new NAT failed because of invalid ' \
                      'input file header:\n   %s' % str( sorted( rule.keys() ) )
            report += 'Expected header:\n    %s' % str( sorted( keys ) )
            break

         if [ x for x in rule.values() if x is None ]:
            report += 'Loading new NAT failed because of invalid ' \
                      'input data: %s' % str( rule )
            break

   def _clearStaticDestinationNat():
      backupStaticNat = {}
      for name in natConfig_.intfConfig.keys():
         intfConfig = natConfig_.intfConfig[ name ]
         backupStaticNat[ name ] = {}
         for localAddress in intfConfig.staticNat.keys():
            staticNatConfig = intfConfig.staticNat[ localAddress ]
            if staticNatConfig.target == 'destination':
               backupStaticNat[ name ][ localAddress ] = staticNatConfig
               del intfConfig.staticNat[ localAddress ]
      return backupStaticNat

   def _revertNatConfig( backupStaticNat ):
      _clearStaticDestinationNat()
      for name in backupStaticNat:
         intfConfig = natConfig_.intfConfig[ name ]
         for staticNat in backupStaticNat[ name ].values():
            intfConfig.staticNat.addMember( staticNat )

   def _natIntfConfig( intfName ):
      intfConfig = natConfig_.intfConfig.get( intfName )
      if not intfConfig:
         intfConfig = natConfig_.intfConfig.newMember( intfName )
      return intfConfig

   if not report:
      # Mount data from Sysdb
      em = EntityManager.Sysdb( 'ar' )
      mg = em.mountGroup()
      natConfig_ = mg.mount( 'ip/nat/config', 'Ip::Nat::Config', 'rw' )
      netConfig_ = mg.mount( 'sys/net/config', 'System::NetConfig', 'r' )
      mg.close( blocking=True )

      hostname = netConfig_.hostname

      # Clear old static destination NAT rules
      backupStaticNat = _clearStaticDestinationNat()

      # Apply new rules
      try:
         for rule in data:
            if rule[ 'Switch hostname' ] != hostname:
               raise Exception( 'Invalid hostname for rule %s. Expecting: %s' %
                                ( str( rule ), hostname ) )

            outsideAddress = Tac.Value( 'Arnet::IpAndPort',
                                        rule[ 'Destination IP outside' ], 
                                        int( rule[ 'Destination Port inside' ] ) )
            insideAddress = Tac.Value( 'Arnet::IpAndPort', 
                                       rule[ 'Destination IP inside' ], 
                                       int( rule[ 'Destination Port inside' ] ) )
            staticNat = Tac.Value( 'Ip::Nat::NatStaticConfig', 
                                   outsideAddress, 
                                   insideAddress,
                                   'destination', '', 0 )
            
            intfConfig = _natIntfConfig( rule[ 'Interface' ] )
            intfConfig.staticNat.addMember( staticNat )

         report += 'Applying new static destination NAT config succeded!'
         report += '\nInput static destination NAT info: %s' % str( data )    
      except Exception, e:      # pylint: disable-msg=W0703
         # If anything goes wrong, revert to old config
         report += 'Loading new NAT failed because of exception: %s' % str( e )
         _revertNatConfig( backupStaticNat )

      # Delete empty NAT configs
      for intfName in natConfig_.intfConfig:
         intfConfig = natConfig_.intfConfig[ intfName ]
         if not intfConfig.staticNat and not intfConfig.dynamicNat:
            del natConfig_.intfConfig[ intfName ]

      # Make sure all updates are sent to Sysdb before the script exits
      Tac.flushEntityLog()

   # Report success status
   if options.email:
      try:
         sendEmail( options.email, 'NAT update report',
                    report, 'support@aristanetworks.com' )
      except Exception, e:      # pylint: disable-msg=W0703
         report += '\n\nWARNING: Failed to email report because of error: ' \
                   '%s\n' % str( e )
         print report
   else:
      print report

if __name__ == '__main__':
   main()
