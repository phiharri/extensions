#!/usr/bin/env python 
#
# Copyright (c) 2013, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Interface Burst Monitor
#
#    Version 1.1
#    Written by: 
#       Andrei Dvornic, Arista Networks
#
#    Revision history:
#       1.0 - initial release
#       1.1 - use fm6000GetPortMibCounters and no batch reads

"""
   DESCRIPTION
      The Interface Burst Monitor script monitors the maximum bit rate
      on an interface and generates a syslog notification whenever a
      burst of traffic exceeding a pre-defined threshold is detected
      on either the RX or TX side of the interface.

   INSTALLATION
      In order to install the Interface Burst Monitor, copy 'ibm' to
      /mnt/flash.

      Interface Burst Monitor can then be started using:
         (bash:root)# /mnt/flash/ibm [<options>] <interface number>&
      and you can use 'nohup' utility in order to make this persistent
      over ssh:
         (bash:root)# nohup /mnt/flash/ibm [<options>] 
            <interface number> &

      See: 
         (bash:root)# /mnt/flash/ibm --help
      for details about the command-line options.

      In order to run the Interface Burst Monitor as a daemon
      (persistent after reboot), add the following to the
      startup-config:
         event-handler ibm
            trigger on-boot
            action bash sudo /usr/bin/daemonize /mnt/flash/ibm
               [<options>] <interface number> &
            asynchronous
      
      Interface Burst Monitor process name is 'ibm-<interface
      number>', so standard Linux tools can be used to stop and
      restart it with different options:
      e.g.
         (bash:root)# pkill ibm-1
         (bash:root)# /mnt/flash/ibm [<new-options>] 1 &

      Note that in order to make sure the Interface Burst Monitor does
      not restart on reboot / starts with a different config on
      reboot, the startup-config has to be changed accordingly.

      In order to uninstall Interface Burst Monitor, use:
         (bash:root)# rm /mnt/flash/ibm
         (bash:root)# pkill -f ibm

   CONFIGURATION/DEBUGGING
      Log messages are generated whenever the TX/RX maximum bit rate
      exceeds certain thresholds (tolerances). These tolerance levels
      are expressed in terms of percentage of the link speed and are
      by default set at 80%, for both RX and TX.  In order to change
      the tolerance levels, use the --rx-tolerance/--tx-tolerance
      command line options:
      e.g. 
         (bash:root)# /mnt/flash/ibm -r 60 -t 90 <interface number> &
      
      In order to enable debugging output to stdout, use the '-d'
      command line option.
      e.g.
         (bash:root)# /mnt/flash/ibm -d ...
      Note that the output can be quite verbose so it is recommended
      that this option is used with caution, and only for debugging
      purposes.

   COMPATIBILITY
      Version 1.1 has been developed and tested against N/A***. Please
      reach out to support@aristanetworks.com if you want to run this
      against a different EOS release.

      ***EOS version not release yet - please contact
         support@aristanetworks.com for details.

  LIMITATIONS
     The script works by polling the hardware counters ever ~1-2ms.
"""

import ast
import datetime
import optparse
import re
import sys

import Ark
import Logging
import PyClient
import Tac

SPEED_TO_BITS = { 'speed1Gbps':  ( 2**10 )**3,
                  'speed10Gbps': 10 * ( 2**10 )**3,
                  'speed40Gbps': 40 * ( 2**10 )**3 }

Ark.configureLogManager( 'ibm' )

INTERFACE_RX_BURST_DETECTED = None
Logging.logD( id='INTERFACE_RX_BURST_DETECTED',
              severity=Logging.logWarning,
              format='RX burst (%s/%sms) detected on port %d',
              explanation='Traffic burst detected on RX side of the interface.',
              recommendedAction=Logging.NO_ACTION_REQUIRED )

INTERFACE_TX_BURST_DETECTED = None
Logging.logD( id='INTERFACE_TX_BURST_DETECTED',
              severity=Logging.logWarning,
              format='TX burst (%s/%sms) detected on port %d',
              explanation='Traffic burst detected on TX side of the interface.',
              recommendedAction=Logging.NO_ACTION_REQUIRED )

debug = False
def _trace( msg ):
   if debug:
      print msg

def _verifyHwModel():
   _trace( '_verifyHwModel()' )
   pc = PyClient.PyClient( 'ar', 'Sysdb' )
   fs = pc.root()[ 'ar' ][ 'Sysdb' ][ 'hardware' ][ 'entmib' ].fixedSystem
   return ( fs and re.match( '^DCS-715', fs.modelName ) )

class BurstMonitor( object ):

   def __init__( self, interfaceNo, rxThreshold, txThreshold ):
      _trace( 'BurstMonitor.__init( %s )' % interfaceNo )
      self.interfaceNo_ = interfaceNo
      self.pc_ = PyClient.PyClient( 'ar', 'FocalPointV2' )

      status = self.pc_.root()[ 'ar' ][ 'Sysdb' ][ 'interface' ][ 'status' ]
      speed = status[ 'eth' ][ 'intf' ][ 'Ethernet%s' % interfaceNo ].speed
      self.rxThreshold_ = SPEED_TO_BITS[ speed ] * rxThreshold / 100
      self.txThreshold_ = SPEED_TO_BITS[ speed ] * txThreshold / 100

      self.cmd_ = '''
from FmApi import fm6000GetPortMibCounters
x = fm6000GetPortMibCounters( 0, %s )
print x.timestamp, x.cntRxGoodOctets, x.cntTxOctets
''' % self.interfaceNo_

      self.checkBurst()

   @staticmethod
   def _burstString( val ):
      # rollover
      if val < 0:
         val += 2**65 * 8

      if val < 10:
         return '%db' % val
      elif val < 10**4:
         return '%.2fKb' % ( val / 10**3 )
      else:
         return '%.2fMb' % ( val / 10**6 )

   def checkBurst( self ):

      prevTs = None
      prevRxCounter = None
      prevTxCounter = None

      while True:
         data = self.pc_.execute( self.cmd_ ).split()

         ts = float( data[ 0 ] )
         rxCounter = float( data[ 1 ] ) * 8
         txCounter = float( data[ 2 ] ) * 8

         if prevTs:
            duration = float( ts - prevTs ) / 1000           # miliseconds
            rxBurst = rxCounter - prevRxCounter
            txBurst = txCounter - prevTxCounter

            rxString = self._burstString( rxBurst )
            if ( rxBurst * 10.0**3 / duration ) > self.rxThreshold_:
               Logging.log( INTERFACE_RX_BURST_DETECTED,
                            rxString, duration, self.interfaceNo_ )

            txString = self._burstString( txBurst )
            if ( txBurst * 10.0**3 / duration ) > self.txThreshold_:
               Logging.log( INTERFACE_TX_BURST_DETECTED,
                            txString, duration, self.interfaceNo_ )

            if prevTs:
               _trace( '%s - checkBurst( %s ): period: %.2fms, rx:%s, tx:%s' % 
                       ( datetime.datetime.now().strftime( '%Y-%m-%d %H:%M:%S.%f' ), 
                         self.interfaceNo_, duration, 
                         rxString, txString ) )

         prevTs = ts
         prevRxCounter = rxCounter
         prevTxCounter = txCounter

def main():
   # Create help string and parse cmd line
   usage = 'usage: %prog [options] <interface number>'
   op = optparse.OptionParser(usage=usage)
   op.add_option( '-d', '--debug', dest='debug', action='store_true',
                  help='print debug info' )
   op.add_option( '-r', '--rx-tolerance', dest='rxTolerance', action='store',
                  type='int', default=80, 
                  help='RX burst size (% of bandwidth) which '
                       'triggers syslog messages (default=80)' )
   op.add_option( '-t', '--tx-tolerance', dest='txTolerance', action='store',
                  type='int', default=80, 
                  help='TX burst size (% of bandwidth) which '
                       'triggers syslog messages (default=80)' )
   opts, args = op.parse_args()
 
   global debug
   debug = opts.debug

   # Check cmd line options
   if not args:
      op.error( 'You need to specify an interface number' )
   elif len( args ) > 1:
      op.error( 'Too many input arguments' )
   elif not args[ 0 ].isdigit():
      op.error( 'Invalid interface number' )

   if not _verifyHwModel():
      sys.exit( 'ERROR: This script only works for Arista 7150 line of products!')

   Tac.setproctitle( 'ibm-%s' % args[ 0 ] )

   _ = BurstMonitor( args[ 0 ], opts.rxTolerance, opts.txTolerance )


if __name__ == '__main__':
   try:
      main()
   except KeyboardInterrupt:
      pass
