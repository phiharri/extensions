#!/usr/bin/env python 
#
# Copyright (c) 2013 Arista Networks, Inc.  All rights reserved.
#
# SNMP Syslog Notifications
#
#    Version 1.0 14/6/2013
#    Written by: 
#       Sean Flack, Arista Networks
#       Andrei Dvornic, Arista Networks
#
#    Revision history:
#       1.0 - initial release

'''
   DESCRIPTION 
      The SNMP Sylog Monitor script enables users to automatically
      send SNMP 'syslogMsgNotification' (RFC5676) notifications,
      whenever EOS-specific syslog messages are being logged.

      The notifications will be sent to all configured notification
      recipients, if SNMP is enabled.

   INSTALLATION
      In order to install SNMP Syslog Monitor, copy 'syslogtrapd' to
      /mnt/flash.

      SNMP Syslog Monitor can then be started using:
         (bash:root)# /mnt/flash/syslogtrapd [<options>] &

      and you can use 'nohup' utility in order to make this persistent
      over ssh:
         (bash:root)# nohup /mnt/flash/syslogtrapd [<options>] &      

      See: 
         (bash:root)# /mnt/flash/syslogtrapd --help      
      for details about the command-line options.

      In order to run SNMP Syslog Monitor as a daemon (persistent
      after reboot), add the following to the startup-config:
         event-handler syslogtrapd
            trigger on-boot
            action bash /mnt/flash/syslogtrapd [<options>]
            asynchronous
      
      The SNMP Syslog Monitor process name is 'syslogtrapd', so
      standard Linux tools can be used to stop and restart it with
      different options:
      e.g.
         (bash:root)# pkill syslogtrapd
         (bash:root)# /mnt/flash/syslogtrapd [<new-options>] &

      Note that in order to make sure the SNMP Syslog Monitor does not
      restart on reboot / starts with a different config on reboot,
      the startup-config has to be changed accordingly.

      In order to uninstall the SNMP Syslog Monitor, use:
         (bash:root)# rm /mnt/flash/syslogtrapd
         (bash:root)# pgrep syslogtrapd | xargs kill    // if running


   CONFIGURATION 
      In order to enable debugging output to stdout, use the '-d'
      command line option.
      e.g.
         (bash:root)# /mnt/flash/syslogtrapd -d ...
      Note that can be quite verbouse, so it is recommended that it is
      used with caution, and only for debugging purposes.

      The syslog messages in /var/log/eos are polled periodically (by
      default every second).  In order to change the polling interval,
      use the -p/--poll-interval option:
      e.g.
         (bash:root)# /mnt/flash/syslogtrapd -p <seconds> ...

   COMPATIBILITY 
      Version 1.0 has been developed and tested against
      EOS-4.11.5. Please reach out to support@aristanetworks.com if
      you want to run this against a different EOS release.

   LIMITATIONS
      The following OID in 'syslogMsgNotification' are not supported
      in version 1.0 and return a default value:
         syslogMsgVersion
         syslogMsgTimeStamp
         syslogMsgAppName
         syslogMsgProcID
         syslogMsgSDParams
'''

import optparse
import os
import subprocess
import sys

from collections import namedtuple

import Cell
import EntityManager
import Tac

syslogFile = '/var/log/eos'
syslogIndex = 1

debug = None
pollInterval = None

netStatus = None
snmpStatus = None
snmpConfig = None

SyslogMsg = namedtuple( 'SyslogMsg', 'timestamp index facility ' 
                        'severity msgName msgText')

def _trace( msg ):
   if debug:
      print msg

def _parseSyslogMsg( syslogLine ):
   global syslogIndex

   tokens = syslogLine.split( '%' )
   timestamp = ' '.join( tokens[ 0 ].split()[ : -2 ] )
   syslogMessage = tokens[ 1 ]

   tokens = syslogMessage.split( '-' )
   facility = tokens[ 0 ]
   severity = tokens[ 1 ]

   tokens = tokens[ 2 ].split( ':' )
   msgName = tokens[ 0 ]
   msgText = tokens[ 1 ].strip()

   syslogIndex += 1

   return SyslogMsg( timestamp, syslogIndex, facility, 
                     severity, msgName, msgText )

def _genSyslogMsgNotificationCmd( syslogMsg ):
   bashAgentXTrapCommand = [ 'sudo', 'agentxtrap', '1.3.6.1.2.1.192.0.1' ]
   oidPrefix = '1.3.6.1.2.1.192.1.2.1' 

   #  syslogMsgFacility
   bashAgentXTrapCommand.extend( [ '%s.2.%d' % ( oidPrefix, syslogMsg.index ),
                                   's', syslogMsg.facility ] )
   #  syslogMsgSeverity
   bashAgentXTrapCommand.extend( [ '%s.3.%d' % ( oidPrefix, syslogMsg.index ),
                                   'i', str( syslogMsg.severity  ) ] )
   # syslogMsgVersion:  A value of 0 indicates that the version is unknown.
   bashAgentXTrapCommand.extend( [ '%s.4.%d' % ( oidPrefix, syslogMsg.index ),
                                   'i', '0' ] )
   # syslogMsgTimeStamp: A zero-length string is returned 
   # if the timestamp is unknown.
   bashAgentXTrapCommand.extend( [ '%s.5.%d' % ( oidPrefix, syslogMsg.index ),
                                   's', '' ] )
   #  syslogMsgHostName
   bashAgentXTrapCommand.extend( [ '%s.6.%d' % ( oidPrefix, syslogMsg.index ),
                                   's', netStatus.hostname ] )
   # syslogMsgAppName:  A zero-length string indicates an unknown app-name.
   bashAgentXTrapCommand.extend( [ '%s.7.%d' % ( oidPrefix, syslogMsg.index ),
                                   's', '' ] )
   # syslogMsgProcID:  A zero-length string indicates an unknown procid.
   bashAgentXTrapCommand.extend( [ '%s.8.%d' % ( oidPrefix, syslogMsg.index ),
                                   's', '' ] )
   # syslogMsgMsgID
   bashAgentXTrapCommand.extend( [ '%s.9.%d' % ( oidPrefix, syslogMsg.index ),
                                   's', syslogMsg.msgName ] )
   # syslogMsgSDParams: The total number of structured data
   # element parameter carried in the SYSLOG message.
   bashAgentXTrapCommand.extend( [ '%s.10.%d' % ( oidPrefix, syslogMsg.index ),
                                   'i', '0' ] )
   # syslogMsgMsg
   bashAgentXTrapCommand.extend( [ '%s.11.%d' % ( oidPrefix, syslogMsg.index ),
                                   's', syslogMsg.msgText ] )
   return bashAgentXTrapCommand

def _sendSyslogTrap( syslogMsg ):
   cmd = _genSyslogMsgNotificationCmd( syslogMsg )
   _trace( "agentXcmd: %s" % cmd )

   try:
      subprocess.Popen( cmd, stdout=subprocess.PIPE )
   except ValueError, e:
      print "Failed to send syslog trap: %s (%s)" % ( cmd, e )
      sys.exit()            

class SyslogMonitor():
   def __init__( self, start ):
      try:
         self.syslogFile = open( syslogFile, 'r' )
      except IOError, e:
         print "Unable to open syslog file: %s (%s)" % ( syslogFile, e )
         sys.exit()

      # Go to end of file
      self.syslogFile.seek( os.stat( syslogFile ).st_size )

      self.clockActivity = Tac.ClockNotifiee()
      self.clockActivity.handler = self.monitorSyslog_
      # Schedule my handler to get called immediately
      if start:
         self.clockActivity.timeMin = Tac.now()
      else:
         self.clockActivity.timeMin = Tac.endOfTime         
      
   def monitorSyslog_( self ):
      _trace( 'monitorSyslog_' )

      syslogLine = self.syslogFile.readline()
      while syslogLine:
         if syslogLine != '\n':
            syslogMsg = _parseSyslogMsg( syslogLine )
            _trace( 'syslogMsg: %s' % str( syslogMsg ) )
            _sendSyslogTrap( syslogMsg )
         syslogLine = self.syslogFile.readline()

      self.clockActivity.timeMin = Tac.now() + pollInterval

class SnmpConfigReactor( Tac.Notifiee ):
   notifierTypeName = 'Snmp::Config'

   def __init__( self, notifier ):
      Tac.Notifiee.__init__( self, notifier )
      self.snmpConfig_ = notifier
      self.sm = SyslogMonitor( self.snmpConfig_.serviceEnabled )
      
   @Tac.handler( 'serviceEnabled' )
   def handleServiceEnabled_( self ):
      _trace( 'handleServiceEnabled_' )

      if self.snmpConfig_.serviceEnabled:
         self.sm.clockActivity.timeMin = Tac.now()
         self.sm.syslogFile.seek( os.stat( syslogFile ).st_size )
      else:
         self.sm.clockActivity.timeMin = Tac.endOfTime         

def main():
   global debug, pollInterval
   global netStatus, snmpConfig, snmpStatus

   Tac.setproctitle( 'syslogtrapd' )

   # Create help string and parse cmd line
   usage = 'usage: %prog [options]'
   op = optparse.OptionParser( usage=usage )
   op.add_option( '-d', '--debug', dest='debug', action='store_true',
                  help='print debug info' )
   op.add_option( '-p', '--poll-interval', dest='pollInterval', action='store',
                  type='int', default=1, 
                  help='syslog file poll interval(default=%defaults)' )
   opts, _ = op.parse_args()

   pollInterval = opts.pollInterval
   debug = opts.debug

   if pollInterval is not None and pollInterval < 0:
      op.error( 'pollInterval must be a positive number or zero' )

   # Mount data from Sysdb                                                    
   em = EntityManager.Sysdb( 'ar' )
   mg = em.mountGroup()
   snmpStatus = mg.mount( 'snmp/status',
                          'Snmp::Status', 'r' )
   snmpConfig = mg.mount( 'snmp/config',
                          'Snmp::Config', 'r' )
   netStatus = mg.mount( Cell.path( 'sys/net/status' ), 
                         'System::NetStatus', 'r' )
   mg.close( blocking=True )

   _ = SnmpConfigReactor( snmpConfig )

   Tac.runActivities()
		
if __name__ == '__main__':
   main()
